#include <stdio.h>
#include<stdlib.h>
struct node
{
char data[100];
struct node* left;
struct node* right;
};
struct head
{
int count;
struct node* root;
}*heads;
void insert(char val[])
{   struct node *current=(struct node*)malloc(sizeof(struct node));
    struct node *prev=(struct node*)malloc(sizeof(struct node));
    struct node *newnode=(struct node *)malloc(sizeof(struct node));
 strcpy(newnode->data,val);
 newnode->left=NULL;
 newnode->right=NULL;
	current=heads->root;
 if(current==NULL)
 {
  heads->root=newnode;
  printf("\nNode Inserted Successfully...");
  return;
 }
 else
 {
 while(current!=NULL)
 {
 prev=current;
 if(strlen(current->data)<strlen(val))
 current=current->left;
 else
 current=current->right;
 }
 if(strlen(val)<strlen(prev->data))
 prev->left=newnode;
 else
 prev->right=newnode;
 printf("\nNode Inserted Successfully...");
 return;
 }

}
void delet(char val[],struct node *current,struct node *prev)
{ char del[20];
if(current==NULL)
printf("Element Not Found");
else
{
if(strlen(val)<strlen(current->data))
delet(val,current->left,current);
else if(strlen(val)>strlen(current->data))
delet(val,current->right,current);
else
{
if(current->left==NULL)
      {
      if(prev!=NULL)
      {

      if(current->data<prev->data)
      {
      prev->left=current->right;
      free(current);
      }
      else
      {
      prev->right=current->right;
      free(current);
      }
      }
      }
else
{
if(current->right==NULL)
      {
      if(prev!=NULL)
      {
      if(current->data<prev->data)
      {
      prev->left=current->left;
      free(current);
      }
      else
      {
      prev->right=current->left;
      free(current);
      }
      }
      }
else
{  struct node *ptr;

ptr=current->left;
while(ptr->right!=NULL)
{
ptr=ptr->right;
}
strcpy(del,current->data);
strcpy(current->data,ptr->data);
strcpy(ptr->data,del);
delet(del,current->left,prev);
}
}
}
}
}
void display(struct node *root)
{
if(root!=NULL)
{
display(root->left);
printf("%s",root->data);
display(root->right);
}
}
int main()
{

heads=(struct head *)malloc(sizeof(struct head));
 clrscr();

heads->count=0;
heads->root=NULL;

insert("qwe");
insert("asd");
insert("zxc");


display(heads->root);
printf("\n");
delet("asd",heads->root,NULL);
delet("zxc",heads->root,NULL);
//delet(5,heads->root,NULL);
display(heads->root);
getch();
return 0;
}
